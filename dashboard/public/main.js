/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/script.ts":
/*!***********************!*\
  !*** ./src/script.ts ***!
  \***********************/
/***/ (() => {

eval("\n// Declaring document\nconst doc = document;\n// Sidebar variables\nconst sidebar = doc.getElementsByClassName(\"aside-sidebar\")[0];\nconst ul = doc.getElementsByClassName(\"sidebar-tabs\")[0];\nconst dashboardTab = ul.getElementsByClassName(\"dashboard-tab\")[0];\nconst categoryToggle = ul.getElementsByClassName(\"category-toggle\")[0];\nconst productToggle = ul.getElementsByClassName(\"product-toggle\")[0];\nconst userToggle = ul.getElementsByClassName(\"user-toggle\")[0];\nconst categoryInner = ul.getElementsByClassName(\"inner-category\")[0];\nconst userInner = ul.getElementsByClassName(\"inner-user\")[0];\n// Adding active class to the clicked sidebar tab\nconst activeSidebarTab = () => {\n    const sidebarTabs = Array.from(ul.getElementsByClassName(\"tabs\"));\n    let previousAdminTab = null;\n    sidebarTabs.forEach((tab) => {\n        tab.addEventListener(\"click\", function (event) {\n            const currentTab = event.currentTarget;\n            if (!currentTab.classList.contains(\"active\")) {\n                // Remove 'active' class from all tabs\n                sidebarTabs.forEach((t) => t.classList.remove(\"active\"));\n                // Add 'active' class to the clicked tab\n                currentTab.classList.add(\"active\");\n                // Handle the toggle button rotation for the currently clicked tab\n                const currentAdminTab = currentTab.querySelector(\".toggle-btn\");\n                if (previousAdminTab && previousAdminTab !== currentAdminTab) {\n                    previousAdminTab.classList.remove(\"rotate-180\");\n                }\n                if (currentAdminTab) {\n                    currentAdminTab.classList.add(\"rotate-180\");\n                }\n                previousAdminTab = currentAdminTab;\n                // Close inner tabs\n                if (categoryToggle.classList.contains(\"flex\")) {\n                    categoryInner.classList.remove(\"flex\");\n                    categoryInner.classList.add(\"hidden\");\n                }\n                if (userToggle.classList.contains(\"flex\")) {\n                    userInner.classList.remove(\"flex\");\n                    userInner.classList.add(\"hidden\");\n                }\n            }\n            else {\n                // For the tab not toggle\n                if (currentTab === productToggle || currentTab === dashboardTab) {\n                    // Keep productToggle and dashboardTab active, do nothing\n                    currentTab.classList.add(\"active\");\n                }\n                else {\n                    currentTab.classList.remove(\"active\");\n                }\n                // Handle the toggle button rotation for the currently clicked tab\n                const currentAdminTab = currentTab.querySelector(\".toggle-btn\");\n                if (currentAdminTab) {\n                    currentAdminTab.classList.remove(\"rotate-180\");\n                }\n                // Reset previousAdminTab as no tab is active now\n                previousAdminTab = null;\n            }\n        });\n    });\n    // End of adding active classes to the sidebar tabs\n};\n// Active inner tabs\nconst activeInnerTabs = () => {\n    const innerTabs = Array.from(ul.getElementsByClassName(\"inner-tabs\"));\n    innerTabs.forEach((tab) => {\n        tab.addEventListener(\"click\", (event) => {\n            const currentInnerTab = event.currentTarget;\n            // Remove 'active' class from all inner tabs\n            innerTabs.forEach((t) => t.classList.remove(\"active\"));\n            // Add 'active' class to the clicked inner tab\n            currentInnerTab.classList.add(\"active\");\n        });\n    });\n};\n// End of active innerTabs\n// Appear inner tabs\nconst appearInnerTabs = () => {\n    const innerCategoryAction = () => {\n        categoryToggle.addEventListener(\"click\", () => {\n            if (categoryToggle.classList.contains(\"active\")) {\n                categoryInner.classList.remove(\"hidden\");\n                categoryInner.classList.add(\"flex\");\n            }\n            else {\n                categoryInner.classList.remove(\"flex\");\n                categoryInner.classList.add(\"hidden\");\n            }\n        });\n    };\n    const innerUserAction = () => {\n        userToggle.addEventListener(\"click\", () => {\n            if (userToggle.classList.contains(\"active\")) {\n                userInner.classList.remove(\"hidden\");\n                userInner.classList.add(\"flex\");\n            }\n            else {\n                userInner.classList.remove(\"flex\");\n                userInner.classList.add(\"hidden\");\n            }\n        });\n    };\n    innerCategoryAction();\n    innerUserAction();\n};\n// End appear inner tabs\n/*\n    ----- End of sidebar part -----\n    ----- Navbar start -----\n*/\n// Navbar variables\nconst mainPart = doc.getElementsByClassName(\"main-part\")[0];\nconst closeSidebarBtn = doc.getElementsByClassName(\"close-sidebar-toggle\")[0];\nconst openSidebarBtn = doc.getElementsByClassName(\"open-sidebar-toggle\")[0];\nconst toggleSidebar = doc.getElementsByClassName(\"toggle-sidebar\")[0];\nconst closeToggleSidebar = doc.getElementsByClassName(\"x-toggle-sidebar\")[0];\nconst sunBtn = doc.getElementsByClassName(\"sun-btn\")[0];\nconst moonBtn = doc.getElementsByClassName(\"moon-btn\")[0];\nconst adminImage = doc.getElementsByClassName(\"admin-image\")[0];\nconst profileDropdown = doc.getElementsByClassName(\"profile-dropdown\")[0];\n// Sidebar disappear\nconst removeSidebar = () => {\n    closeSidebarBtn.addEventListener(\"click\", () => {\n        // Remove sidebar\n        sidebar.classList.remove(\"lg:block\", \"md:block\");\n        sidebar.classList.add(\"lg:hidden\", \"md:hidden\");\n        // Full navbar\n        mainPart.classList.remove(\"lg:w-5/6\", \"md:w-5/6\");\n        mainPart.classList.add(\"lg:w-full\", \"md:w-full\");\n        // Hide close toggle\n        closeSidebarBtn.classList.remove(\"lg:block\", \"md:block\");\n        closeSidebarBtn.classList.add(\"lg:hidden\", \"md:hidden\");\n        // Add open toggle\n        openSidebarBtn.classList.remove(\"lg:hidden\", \"md:hidden\");\n        openSidebarBtn.classList.add(\"lg:block\", \"md:block\");\n    });\n};\n// Sidebar appear\nconst addSidebar = () => {\n    openSidebarBtn.addEventListener(\"click\", () => {\n        // Remove sidebar\n        sidebar.classList.remove(\"lg:hidden\", \"md:hidden\");\n        sidebar.classList.add(\"lg:block\", \"md:block\");\n        // Fixed navbar\n        mainPart.classList.remove(\"lg:w-full\", \"md:w-full\");\n        mainPart.classList.add(\"lg:w-5/6\", \"md:w-5/6\");\n        // Add close toggle\n        closeSidebarBtn.classList.remove(\"lg:hidden\", \"md:hidden\");\n        closeSidebarBtn.classList.add(\"lg:block\", \"md:block\");\n        // Hide open toggle\n        openSidebarBtn.classList.remove(\"lg:block\", \"md:block\");\n        openSidebarBtn.classList.add(\"lg:hidden\", \"md:hidden\");\n    });\n};\n// Add sidebar for small screen\nconst addSidebarSmallScreen = () => {\n    toggleSidebar.addEventListener(\"click\", () => {\n        sidebar.classList.remove(\"sm:-left-[50%]\");\n        sidebar.classList.add(\"sm:left-0\");\n    });\n};\n// Hide sidebar for small screen\nconst hideSidebarSmallScreen = () => {\n    closeToggleSidebar.addEventListener(\"click\", () => {\n        sidebar.classList.remove(\"sm:left-0\");\n        sidebar.classList.add(\"sm:-left-[50%]\");\n    });\n};\n// Light mode\nconst activeLightmode = () => {\n    sunBtn.addEventListener(\"click\", () => {\n        document.body.classList.remove(\"dark\");\n        localStorage.setItem(\"theme\", \"light\");\n        sunBtn.classList.add(\"hidden\");\n        moonBtn.classList.remove(\"hidden\");\n        moonBtn.classList.add(\"block\");\n    });\n};\n// Dark mode\nconst activeDarkmode = () => {\n    moonBtn.addEventListener(\"click\", () => {\n        document.body.classList.add(\"dark\");\n        localStorage.setItem(\"theme\", \"dark\");\n        moonBtn.classList.add(\"hidden\");\n        sunBtn.classList.remove(\"hidden\");\n        sunBtn.classList.add(\"block\");\n    });\n};\n// Changes between light and dark\nconst currentMode = localStorage.getItem(\"theme\");\nif (currentMode === \"dark\") {\n    doc.body.classList.add(\"dark\");\n    moonBtn.classList.add(\"hidden\");\n    sunBtn.classList.remove(\"hidden\");\n    sunBtn.classList.add(\"block\");\n}\nelse {\n    doc.body.classList.remove(\"dark\");\n    sunBtn.classList.add(\"hidden\");\n    moonBtn.classList.remove(\"hidden\");\n    moonBtn.classList.add(\"block\");\n}\n// Active dropdown\nconst activeDropdown = () => {\n    adminImage.addEventListener(\"click\", () => {\n        if (profileDropdown.classList.contains(\"hidden\")) {\n            profileDropdown.classList.remove(\"hidden\");\n            profileDropdown.classList.add(\"block\");\n        }\n        else {\n            profileDropdown.classList.remove(\"block\");\n            profileDropdown.classList.add(\"hidden\");\n        }\n    });\n};\n// Main\nconst main = () => {\n    // Sidebar functions\n    activeSidebarTab();\n    activeInnerTabs();\n    appearInnerTabs();\n    // Navbar functions\n    removeSidebar();\n    addSidebar();\n    addSidebarSmallScreen();\n    hideSidebarSmallScreen();\n    activeLightmode();\n    activeDarkmode();\n    activeDropdown();\n};\ndoc.addEventListener(\"DOMContentLoaded\", main);\n\n\n//# sourceURL=webpack://futu/./src/script.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/script.ts"]();
/******/ 	
/******/ })()
;